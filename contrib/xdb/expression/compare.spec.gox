package expression

import (
	"fmt"
	"regexp"

	"github.com/zhiyunliu/glue/xdb"
	"github.com/zhiyunliu/golibs/xtypes"
)

func init() {
	RegistMatcher(&compareSpecMatcher{
		//t.field < aaa
		//t.field > aaa
		//t.field <= aaa
		//t.field >= aaa

		//field < aaa
		//field > aaa
		//field <= aaa
		//field >= aaa

		regexp: regexp.MustCompile(`^((\w+\.)?\w+)\s*(>|>=|=|<|<=)\s*(\w+)$`),
		symbols: map[string]string{
			"&": "and",
			"|": "or",
		},
	})
}

type compareSpecMatcher struct {
	symbols xtypes.SMap
	regexp  *regexp.Regexp
}

func (m *compareSpecMatcher) Priority() int {
	return 21
}

func (m *compareSpecMatcher) Pattern() string {
	return m.regexp.String()
}

func (m *compareSpecMatcher) Symbols() []string {
	return m.symbols.Keys()
}

func (m *compareSpecMatcher) MatchString(expression string) (valuer xdb.ExpressionValuer, ok bool) {

	parties := m.regexp.FindStringSubmatch(expression)
	if len(parties) <= 0 {
		return
	}
	ok = true

	item := &xdb.PropertyExpr{
		FullField: parties[1],
		Oper:      parties[2],
		PropName:  parties[3],
	}
	if len(parties) == 5 {
		item.Oper = parties[3]
		item.PropName = parties[4]
	}

	item.PropertyCallback = m.buildCallback()
	return item, ok
}

func (m *compareSpecMatcher) buildCallback() xdb.PropertyExprBuildCallback {
	return func(item *xdb.PropertyExpr, symbol string, param xdb.DBParam, argName string) (part string, err xdb.MissError) {

		concat, ok := m.symbols[symbol]
		if !ok {
			return "", xdb.NewMissPropError(item.GetPropName())
		}
		return fmt.Sprintf("%s %s%s%s", concat, item.GetFullfield(), item.GetOper(), argName), nil
	}
}
